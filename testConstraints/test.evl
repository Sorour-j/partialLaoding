model javaMM driver Neo4j {nsuri = "http://www.eclipse.org/MoDisco/Java/0.2.incubation/java"};

operation MethodDeclaration isEquals() : Boolean {
	return self.name == "equals" and
		self.parameters.size() == 1 and
		self.parameters.first().type.type.name == "Object" and
		self.thrownExceptions.isEmpty() and
		self.returnType.isDefined() and
		self.returnType.type.isTypeOf(PrimitiveTypeBoolean) and
		self.modifier.isDefined() and
		self.modifier.visibility == VisibilityKind#public;
}
operation ClassDeclaration getPublicFields() : Collection {
	return self.bodyDeclarations.select(bd : BodyDeclaration |
											bd.isKindOf(FieldDeclaration) and
											bd.check(self)
										);
		//bd.modifier.isDefined() and
		//bd.modifier.visibility == VisibilityKind#public
}

operation BodyDeclaration check( cd : ClassDeclaration) : Boolean{
if (cd.isTypeOf(FieldDeclaration)){
    var st : FieldDeclaration;
    st = self;    
    return (st.modifier.isDefined() and bd.modifier.visibility == VisibilityKind#public);
}
else
	return false;
}
operation MethodDeclaration isHashcode() : Boolean {
	return self.name == "hashCode" and
		self.parameters.isEmpty() and
		self.thrownExceptions.isEmpty() and
		self.returnType.isDefined() and
		self.returnType.type.isTypeOf(PrimitiveTypeInt) and
		self.modifier.isDefined() and
		self.modifier.visibility == VisibilityKind#public;
}

operation MethodDeclaration isToString() : Boolean {
	return self.name == "toString" and
		self.parameters.isEmpty() and
		self.thrownExceptions.isEmpty() and
		self.returnType.isDefined() and
		(self.returnType.type.name == "String" or
		self.returnType.type.name == "java.lang.String") and
		self.modifier.isDefined() and
		self.modifier.visibility == VisibilityKind#public;
}

operation MethodDeclaration isClone() : Boolean {
	return self.name == "clone" and
		self.parameters.isEmpty() and
		self.returnType.isDefined() and
		self.thrownExceptions.size() == 1 and
		self.thrownExceptions.first().type.name == "CloneNotSupportedException" and
		self.modifier.isDefined() and
		self.modifier.visibility == VisibilityKind#public;
}

operation MethodDeclaration isFinalize() : Boolean {
	return self.name == "finalize" and
		self.parameters.isEmpty() and
		self.thrownExceptions.size() == 1 and
		self.thrownExceptions.first().type.name == "Throwable" and
		(self.returnType.isUndefined() or self.returnType.type.isTypeOf(PrimitiveTypeVoid)) and
		self.modifier.isDefined() and
		(self.modifier.visibility == VisibilityKind#public or
		self.modifier.visibility == VisibilityKind#protected);
}

operation MethodDeclaration isCompareTo() : Boolean {
	return self.name == "compareTo" and
		self.parameters.size() == 1 and
		self.thrownExceptions.isEmpty() and
		self.returnType.isDefined() and
		self.returnType.type.isTypeOf(PrimitiveTypeInt) and
		self.modifier.isDefined() and
		self.modifier.visibility == VisibilityKind#public;
}

operation Type checkName(td : TypeDeclaration) : Boolean{
if (self.isTypeOf(SimpleType)){
    var st : SimpleType;
    st = self;    
    return (st.name.fullyQualifiedName == td.name.fullyQualifiedName);
}
else
	return false;
}

context ClassDeclaration {
	constraint publicFieldsOnlyInPOJO {
		guard: self.getPublicFields().notEmpty()
		check: self.bodyDeclarations.select(bd : BodyDeclaration |
			bd.isKindOf(MethodDeclaration) and
			(bd.modifier.isUndefined() or (bd.modifier.static.isDefined() and bd.modifier.static))
			and not (
				bd.isEquals() or bd.isHashcode() or bd.isToString()
				or bd.isFinalize() or bd.isClone() or bd.isCompareTo()
			)
		).isEmpty()
	}
}